// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  phone       String        @unique
  createdAt   DateTime      @default(now())
  enrollments Enrollment[]
  progress    Progress[]
  sessions    Session?
  QuizAttempt QuizAttempt[]
}

model Course {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  duration    String
  createdAt   DateTime      @default(now())
  modules     Module[]
  enrollments Enrollment[]
  progress    Progress[]
  lesson      Lesson[]
}

model Module {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String    @db.ObjectId
  lessons   Lesson[]
}

model Lesson {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  module    Module     @relation(fields: [moduleId], references: [id])
  moduleId  String     @db.ObjectId
  Course    Course?    @relation(fields: [courseId], references: [id])
  courseId  String?    @db.ObjectId
  Progress  Progress[]
  Quiz      Quiz[]
}

model Enrollment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @db.ObjectId
  enrolledAt  DateTime  @default(now())
}

model Progress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @db.ObjectId
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  lessonId    String    @db.ObjectId
  completedAt DateTime  @default(now())
}

model Session {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique @db.ObjectId
  state     String
  data     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Quiz {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  lessonId    String          @db.ObjectId
  lesson      Lesson          @relation(fields: [lessonId], references: [id])
  questions   QuizQuestion[]
  QuizAttempt QuizAttempt[]
}

model QuizQuestion {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  quizId        String    @db.ObjectId
  quiz          Quiz      @relation(fields: [quizId], references: [id])
  questionText  String
  options       String[]  // Array of answer options
  correctOption Int       // Index of correct answer
}

model QuizAttempt {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  quizId    String    @db.ObjectId
  quiz      Quiz      @relation(fields: [quizId], references: [id])
  score     Int
  timestamp DateTime  @default(now())
}