name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo SSH connection successful"

      - name: Deploy to VPS & Setup Nginx
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          APP_NAME: "eduflex"
          GIT_REPO: "git@github.com:LivingHopeDev/eduflex.git"
          DOMAIN_NAME: ${{ secrets.SERVER_HOST }}
          PORT: "3000"
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
          set -x  # Print each command before executing
          echo "Deploying $APP_NAME to VPS..."

          # 1️⃣ Ensure project directory exists
          if [ ! -d "/root/$APP_NAME/.git" ]; then
            echo "📥 Cloning repository..."
            rm -rf /root/$APP_NAME  # Remove any incomplete or non-git directory
            git clone git@github.com:LivingHopeDev/eduflex.git /root/$APP_NAME || { echo "❌ Git clone failed!"; exit 1; }
          else
            echo "🔄 Repository already exists, pulling latest changes..."
            cd /root/$APP_NAME
            git reset --hard  # Ensure a clean state before pulling
            git pull origin main || { echo "❌ Git pull failed!"; exit 1; }
          fi

          # 2️⃣ Install dependencies
          echo "📦 Installing dependencies..."
          cd /root/$APP_NAME
          npm install --production || { echo "❌ NPM install failed!"; exit 1; }

          # 3️⃣ Restart app with PM2
          echo "🚀 Restarting app with PM2..."
          pm2 restart $APP_NAME || pm2 start npm --name "$APP_NAME" -- run start
          pm2 save

          # 4️⃣ Install Nginx if not installed
          if ! command -v nginx &> /dev/null; then
            echo "🌐 Installing Nginx..."
            apt update && apt install -y nginx
          fi

          # 5️⃣ Configure Nginx reverse proxy
          echo "🛠 Setting up Nginx..."
          cat > /etc/nginx/sites-available/$APP_NAME <<EOL
          server {
              listen 80;
              server_name $SERVER_HOST;

              location / {
                  proxy_pass http://localhost:$PORT;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOL

          ln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/sites-enabled/
          nginx -t && systemctl restart nginx

          echo "✅ Nginx setup complete!"
          EOF
